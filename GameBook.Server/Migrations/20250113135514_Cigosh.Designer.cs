// <auto-generated />
using GameBook.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameBook.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250113135514_Cigosh")]
    partial class Cigosh
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("GameBook.Server.Models.ConsumableItem", b =>
                {
                    b.Property<int>("ConsumableItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HealthValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RadiationValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsumableItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("ConsumableItems");
                });

            modelBuilder.Entity("GameBook.Server.Models.Dialog", b =>
                {
                    b.Property<int>("DialogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DialogOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IteractibleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DialogID");

                    b.HasIndex("IteractibleID");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("GameBook.Server.Models.DialogResponse", b =>
                {
                    b.Property<int>("DialogResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DialogID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelationshipEffect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DialogResponseID");

                    b.HasIndex("DialogID");

                    b.ToTable("DialogResponses");
                });

            modelBuilder.Entity("GameBook.Server.Models.InteractOption", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OptionID");

                    b.ToTable("InteractOptions");
                });

            modelBuilder.Entity("GameBook.Server.Models.Interactible", b =>
                {
                    b.Property<int>("InteractibleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InteractibleID");

                    b.ToTable("Interactibles");
                });

            modelBuilder.Entity("GameBook.Server.Models.InteractiblesItem", b =>
                {
                    b.Property<int>("InteractibleItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InteractibleID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InteractibleItemID");

                    b.HasIndex("InteractibleID");

                    b.HasIndex("ItemId");

                    b.ToTable("InteractiblesItems");
                });

            modelBuilder.Entity("GameBook.Server.Models.InteractiblesOption", b =>
                {
                    b.Property<int>("InteractibleOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InteractibleID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("InteractibleOptionID");

                    b.HasIndex("InteractibleID");

                    b.HasIndex("OptionID");

                    b.ToTable("InteractiblesOptions");
                });

            modelBuilder.Entity("GameBook.Server.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Stackable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TradeValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GameBook.Server.Models.ItemCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("GameBook.Server.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RadiationGain")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("GameBook.Server.Models.LocationContent", b =>
                {
                    b.Property<int>("LocationContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("InteractibleID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XPos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YPos")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationContentID");

                    b.HasIndex("InteractibleID");

                    b.HasIndex("LocationID");

                    b.ToTable("LocationContent");
                });

            modelBuilder.Entity("GameBook.Server.Models.LocationPath", b =>
                {
                    b.Property<int>("PathID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnergyTravelCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstNodeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondNodeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PathID");

                    b.HasIndex("FirstNodeID");

                    b.HasIndex("SecondNodeID");

                    b.ToTable("LocationPaths");
                });

            modelBuilder.Entity("GameBook.Server.Models.ConsumableItem", b =>
                {
                    b.HasOne("GameBook.Server.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameBook.Server.Models.Dialog", b =>
                {
                    b.HasOne("GameBook.Server.Models.Interactible", "Interactible")
                        .WithMany()
                        .HasForeignKey("IteractibleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interactible");
                });

            modelBuilder.Entity("GameBook.Server.Models.DialogResponse", b =>
                {
                    b.HasOne("GameBook.Server.Models.Dialog", "Dialog")
                        .WithMany("DialogResponses")
                        .HasForeignKey("DialogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("GameBook.Server.Models.InteractiblesItem", b =>
                {
                    b.HasOne("GameBook.Server.Models.Interactible", "Interactible")
                        .WithMany()
                        .HasForeignKey("InteractibleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameBook.Server.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interactible");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameBook.Server.Models.InteractiblesOption", b =>
                {
                    b.HasOne("GameBook.Server.Models.Interactible", "Interactible")
                        .WithMany()
                        .HasForeignKey("InteractibleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameBook.Server.Models.InteractOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interactible");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("GameBook.Server.Models.Item", b =>
                {
                    b.HasOne("GameBook.Server.Models.ItemCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GameBook.Server.Models.LocationContent", b =>
                {
                    b.HasOne("GameBook.Server.Models.Interactible", "Interactible")
                        .WithMany()
                        .HasForeignKey("InteractibleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameBook.Server.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interactible");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("GameBook.Server.Models.LocationPath", b =>
                {
                    b.HasOne("GameBook.Server.Models.Location", "FirstNode")
                        .WithMany()
                        .HasForeignKey("FirstNodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameBook.Server.Models.Location", "SecondNode")
                        .WithMany()
                        .HasForeignKey("SecondNodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstNode");

                    b.Navigation("SecondNode");
                });

            modelBuilder.Entity("GameBook.Server.Models.Dialog", b =>
                {
                    b.Navigation("DialogResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
